class Solution {
  public:
    void solve(int row, int col, string curr,
    vector<string>&ans, vector<vector<int>>&maze,
    vector<vector<int>>vis){
        int n=maze.size(), m=maze[0].size();
        if(row==n-1 && col==m-1){
            ans.push_back(curr);
            return;
        }
        
        vis[row][col]=1;
        
        int nrow, ncol;
        
        nrow=row+1; ncol=col;
        if(nrow>=0 && nrow<n && ncol>=0 && ncol<m &&
        vis[nrow][ncol]==0 && maze[nrow][ncol]==1){
            solve(nrow, ncol, curr+'D', ans, maze, vis);
        }
        
        nrow=row; ncol=col-1;
        if(nrow>=0 && nrow<n && ncol>=0 && ncol<m &&
        vis[nrow][ncol]==0 && maze[nrow][ncol]==1){
            solve(nrow, ncol, curr+'L', ans, maze, vis);
        }
        
        nrow=row; ncol=col+1;
        if(nrow>=0 && nrow<n && ncol>=0 && ncol<m &&
        vis[nrow][ncol]==0 && maze[nrow][ncol]==1){
            solve(nrow, ncol, curr+'R', ans, maze, vis);
        }
        
        nrow=row-1; ncol=col;
        if(nrow>=0 && nrow<n && ncol>=0 && ncol<m &&
        vis[nrow][ncol]==0 && maze[nrow][ncol]==1){
            solve(nrow, ncol, curr+'U', ans, maze, vis);
        }
        
        vis[row][col]=0;
        return;
    }
  
    vector<string> ratInMaze(vector<vector<int>>& maze) {
        // code here
        int n=maze.size(), m=maze[0].size();
        vector<vector<int>>vis(n, vector<int>(m,0));
        
        string curr="";
        if(maze[0][0]==0 && maze[n-1][m-1]==0){
            return {};
        }
        
        vector<string>ans;
        
        solve(0,0 ,curr, ans, maze, vis);
        
        return ans;
    }
};
